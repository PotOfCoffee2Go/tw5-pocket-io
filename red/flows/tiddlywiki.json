[
    {
        "id": "62c6b96ab760ca78",
        "type": "tab",
        "label": "TiddlyWiki",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5b24d6e63acf9047",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0d3535cb27027846",
        "type": "subflow",
        "name": "tiddlers",
        "info": "\r\nAppend tiddler or array of tiddlers in `msg.payload`\r\nto the msg being returned to the requesting wiki.\r\nThe node can be used multiple times in a single flow.\r\n\r\n## msg.payload\r\nContains JavaScript object or array of objects containing the fields of the tiddler.\r\n - **title** field is required \r\n - **text** is not required - but is very common\r\n \r\n",
        "category": "parser",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "1b089e0ef2eb4a3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 80,
                "wires": [
                    {
                        "id": "1b089e0ef2eb4a3e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "MIT"
        },
        "color": "#DEBD5C",
        "status": {
            "x": 520,
            "y": 140,
            "wires": [
                {
                    "id": "739878cd3a06c69a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "489223c003015b3f",
        "type": "subflow",
        "name": "write wiki",
        "info": "",
        "category": "storage",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "6801d4530f3d9135"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "6801d4530f3d9135",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DEB887",
        "status": {
            "x": 340,
            "y": 140,
            "wires": [
                {
                    "id": "24783140a82cde75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "295b59907f0d97d2",
        "type": "subflow",
        "name": "read wiki",
        "info": "Read tiddlers from a wiki. Normally uses the `msg.wikiname` and `msg.twfilter` fields.\r\n\r\n",
        "category": "storage",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "b7e1909b4d67f4cf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 340,
                "y": 80,
                "wires": [
                    {
                        "id": "b7e1909b4d67f4cf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tw_msg_overrides",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Use msg.wikiname / msg.twfilter"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "tw_wikiname",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bookmark-o",
                    "label": {
                        "en-US": "Default wiki"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            },
            {
                "name": "tw_filter",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-filter",
                    "label": {
                        "en-US": "Default filter"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "license": "MIT"
        },
        "color": "#DEB887",
        "status": {
            "x": 340,
            "y": 140,
            "wires": [
                {
                    "id": "e81be91656e745fa",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "83b81066588d5f7b",
        "type": "subflow",
        "name": "wiki out",
        "info": "",
        "category": "network",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "4876804024f936fa"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDDDDD",
        "icon": "node-red/bridge-dash.svg"
    },
    {
        "id": "8adf8de645b60e16",
        "type": "subflow",
        "name": "wiki in",
        "info": "",
        "category": "network",
        "in": [],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "c423533ded980b73",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDDDDD",
        "icon": "node-red/bridge-dash.svg",
        "status": {
            "x": 320,
            "y": 140,
            "wires": [
                {
                    "id": "cadd7bb71eeb7243",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "f7464a8f5cc4e442",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "name": "\\n This flow returns a few tiddlers in response to the topic 'hello' request \\n  ",
        "style": {
            "label": true,
            "label-position": "n"
        },
        "nodes": [
            "4df2c978a7ce6665",
            "de83c426cb05bd04",
            "f851efef43d004c1",
            "0a11219ac3279f4f",
            "ddd1dfc131b74fd7",
            "122e9298ddc68975",
            "c882655e8d51597f",
            "c8562eaca2dbbd8d",
            "80407f300ac7033c",
            "792e64e3d6b6966f"
        ],
        "x": 8,
        "y": 87,
        "w": 1114,
        "h": 294,
        "info": "# Example of Tiddlywiki Request\r\n\r\n"
    },
    {
        "id": "392b55f1513f4105",
        "type": "group",
        "z": "83b81066588d5f7b",
        "name": "\\n Sends message response back to TiddlyWiki \\n   ",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none"
        },
        "nodes": [
            "4876804024f936fa"
        ],
        "x": 154,
        "y": 39,
        "w": 286,
        "h": 122
    },
    {
        "id": "0a11219ac3279f4f",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Switch node \\n msg.topic matches \\n 'hello'",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none",
            "fill": "none"
        },
        "nodes": [
            "cdcaa30c8d7b6208"
        ],
        "x": 194,
        "y": 179,
        "w": 192,
        "h": 122
    },
    {
        "id": "ddd1dfc131b74fd7",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Template nodes \\n tiddlers in JSON \\n format above \\n .tid below",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none",
            "fill": "none"
        },
        "nodes": [
            "5516b95ab068d43b"
        ],
        "x": 394,
        "y": 179,
        "w": 192,
        "h": 138
    },
    {
        "id": "122e9298ddc68975",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Parser node \\n parses text tiddlers into \\n javascript objects",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none",
            "fill": "none"
        },
        "nodes": [
            "2a97f1fbcf6e3dfa"
        ],
        "x": 594,
        "y": 179,
        "w": 192,
        "h": 122
    },
    {
        "id": "c882655e8d51597f",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Network 'wiki in' Node",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none",
            "fill": "none"
        },
        "nodes": [
            "07f989c3cdeb14cb"
        ],
        "x": 34,
        "y": 179,
        "w": 152,
        "h": 90
    },
    {
        "id": "c8562eaca2dbbd8d",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Network 'wiki out' node",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none",
            "fill": "none"
        },
        "nodes": [
            "fd667c5c3ed8286e"
        ],
        "x": 924,
        "y": 179,
        "w": 172,
        "h": 90
    },
    {
        "id": "792e64e3d6b6966f",
        "type": "group",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "Storage node \\n write tiddlers to wiki",
        "style": {
            "stroke": "none",
            "label": true,
            "label-position": "s",
            "fill": "none"
        },
        "nodes": [
            "0eea472695108fa2"
        ],
        "x": 774,
        "y": 179,
        "w": 172,
        "h": 106
    },
    {
        "id": "1b089e0ef2eb4a3e",
        "type": "function",
        "z": "0d3535cb27027846",
        "name": "Parse JSON or .tid tiddlers in msg.payload  \\n into javascript array of tiddler objects",
        "func": "// msg.payload transformed into a JavaScript array of tiddler field objects\n//  then appended the tiddlers to be sent back to webserver client\nconst $tw = global.get('$rw'); // general utility wiki\nvar tiddlers = [];\n\nfunction deserializeTid(lines) {\n    var text = lines.join('\\n').replace(/^\\s*/,'');\n    if (text) {\n        tiddlers.push($tw.wiki.deserializeTiddlers(null, text,\n            { title: 'Parsing error' }, { deserializer: 'application/x-tiddler' })[0]);\n    }\n}\n\nfunction compoundTid(text) {\n    const lines = text.split('\\n');\n    var tidText = [];\n    lines.forEach(line => {\n        if (/^\\s*\\+===\\+\\s*$/.test(line)) {\n            deserializeTid(tidText);\n            tidText = [];\n            return; // continue next line\n        }\n        tidText.push(line);\n    })\n    deserializeTid(tidText);\n    return tiddlers;\n}\n\n// Single tiddler - push to the resultTiddlers\n//  else concat the array of tiddlers to resultTiddlers\nif (typeof msg.payload === 'string') {\n    // JSON in string format?\n    if (/^\\s*\\{/.test(msg.payload) || /^\\s*\\[/.test(msg.payload) ) {\n        tiddlers = $tw.wiki.deserializeTiddlers(null, msg.payload,\n            { title: 'Parsing error' }, { deserializer: 'application/json' });\n\n    }\n    else { // Assume in .tid format\n        tiddlers = compoundTid(msg.payload);\n    }\n    msg.payload = tiddlers;\n}\n\nif (!Array.isArray(msg.payload)) {  msg.payload = [msg.payload]; }\n\nnode.status(`${msg.payload.length} tiddlers parsed`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "739878cd3a06c69a",
        "type": "status",
        "z": "0d3535cb27027846",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6801d4530f3d9135",
        "type": "function",
        "z": "489223c003015b3f",
        "name": "write tiddlers \\n to wiki",
        "func": "//msg.wiki.resultTiddlers = msg.wiki.resultTiddlers.concat(msg.payload);\nconst $tw = global.get('get$tw')(msg.wikiname);\nmsg.payload.forEach(tid => {\n\tvar tiddler = Object.assign({},tid);\n\tif (tiddler.ioToStory !== undefined) {\n\t\tdelete tiddler.ioToStory;\n\t}\n\t$tw.wiki.addTiddler(new $tw.Tiddler(\n\t\t$tw.wiki.getCreationFields(),\n\t\ttiddler,\n\t\t$tw.wiki.getModificationFields(),\n\t))\n})\nnode.status(`${msg.payload.length} tiddlers written`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "24783140a82cde75",
        "type": "status",
        "z": "489223c003015b3f",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e1909b4d67f4cf",
        "type": "function",
        "z": "295b59907f0d97d2",
        "name": "read tiddlers \\n from wiki",
        "func": "var wikiname = msg.wikiname || env.get('tw_wikiname');\nvar twfilter = msg.twfilter || env.get('tw_filter');\n\nif (!wikiname || !twfilter) {\n    node.error(`Need both wikiname and twfilter`);\n    node.done();\n    return;\n}\n\nmsg.wikiname = wikiname;\nmsg.twfilter = twfilter;\n\nconst $tw = global.get('get$tw')(wikiname);\nif (!$tw) {\n    node.error(`Wiki ${wikiname} is not found`);\n    node.done();\n    return;\n}\n\nmsg.payload = JSON.parse($tw.wiki.getTiddlersAsJson(twfilter));\nnode.status(`${msg.payload.length} tiddlers read`);\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e81be91656e745fa",
        "type": "status",
        "z": "295b59907f0d97d2",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4876804024f936fa",
        "type": "function",
        "z": "83b81066588d5f7b",
        "g": "392b55f1513f4105",
        "name": "To TW Webserver(s)",
        "func": "const $sockets = global.get('$sockets');\nconst $refreshClients = global.get('$refreshClients');\n\n// Send to a specific client\nif (msg.wiki && msg.wiki.req.socketId) {\n\tmsg.payload.forEach(tiddler => {\n\t\tif (tiddler.ioToStory !== undefined) {\n\t\t\tmsg.wiki.riverTitles.push(tiddler.title);\n\t\t\tdelete tiddler.ioToStory;\n\t\t}\n\t\tmsg.wiki.resultTiddlers.push(tiddler);\n\t})\n   $sockets[msg.wiki.req.socketId].socket.emit('msg', msg.wiki);\n}\n// Refresh any client connect to this wiki\n$refreshClients(msg.wikiname);\n\nreturn;\n",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 80,
        "wires": []
    },
    {
        "id": "c423533ded980b73",
        "type": "function",
        "z": "8adf8de645b60e16",
        "name": "From TW Webserver",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst $nrMsgNodes = global.get('$nrMsgNodes');\nconst index = $nrMsgNodes.indexOf(node);\n\nif (index > -1) { // only splice array when item is found\n    $nrMsgNodes.splice(index, 1); // 2nd parameter means remove one item only\n}\n$nrMsgNodes.push(node); \n",
        "finalize": "// Code added here will be run when the\n// node is being stopped or re-deployed.\nconst $nrMsgNodes = global.get('$nrMsgNodes');\nconst index = $nrMsgNodes.indexOf(node);\n\nif (index > -1) { // only splice array when item is found\n    $nrMsgNodes.splice(index, 1); // 2nd parameter means remove one item only\n}\n",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cadd7bb71eeb7243",
        "type": "status",
        "z": "8adf8de645b60e16",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "4df2c978a7ce6665",
        "type": "debug",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "TW message in",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 240,
        "y": 340,
        "wires": []
    },
    {
        "id": "cdcaa30c8d7b6208",
        "type": "switch",
        "z": "62c6b96ab760ca78",
        "g": "0a11219ac3279f4f",
        "name": "topic: hello",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "hello",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 290,
        "y": 220,
        "wires": [
            [
                "80407f300ac7033c",
                "5516b95ab068d43b"
            ]
        ]
    },
    {
        "id": "5516b95ab068d43b",
        "type": "template",
        "z": "62c6b96ab760ca78",
        "g": "ddd1dfc131b74fd7",
        "name": "a few tiddlers",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "[\n    {\n        \"title\": \"My first Node-Red tiddler\",\n        \"text\": \"Your socketId is @@color:aqua; {{wiki.req.socketId}} @@\",\n        \"ioToStory\": \"yes\",\n        \"tags\": \"node-red1\"\n    },\n    {\n        \"title\": \"My second Node-Red tiddler\",\n        \"tags\": \"node-red1\",\n        \"text\": \"Your wiki name is @@border:1px solid aqua; &nbsp;{{wiki.req.wikiName}}&nbsp; @@\"\n    }\n]\n",
        "output": "str",
        "x": 490,
        "y": 220,
        "wires": [
            [
                "2a97f1fbcf6e3dfa"
            ]
        ]
    },
    {
        "id": "2a97f1fbcf6e3dfa",
        "type": "subflow:0d3535cb27027846",
        "z": "62c6b96ab760ca78",
        "g": "122e9298ddc68975",
        "name": "tiddler parser",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "0eea472695108fa2"
            ]
        ]
    },
    {
        "id": "de83c426cb05bd04",
        "type": "debug",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "TW message out",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 340,
        "wires": []
    },
    {
        "id": "f851efef43d004c1",
        "type": "comment",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": "<$button actions=\"<<node-red 'hello'>>\"> Hello Node-Red </$button>",
        "info": "",
        "x": 570,
        "y": 160,
        "wires": []
    },
    {
        "id": "8c75cd6c898531c4",
        "type": "inject",
        "z": "62c6b96ab760ca78",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1020,
        "wires": [
            [
                "900a8c6c9eec40f3"
            ]
        ]
    },
    {
        "id": "900a8c6c9eec40f3",
        "type": "function",
        "z": "62c6b96ab760ca78",
        "name": "Get 'Home' wiki URL to debug window",
        "func": "const get$proxy = global.get('get$proxy');\n\nnode.warn(`Home wiki is at ${get$proxy('Home').link}`)\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1020,
        "wires": [
            []
        ]
    },
    {
        "id": "80407f300ac7033c",
        "type": "template",
        "z": "62c6b96ab760ca78",
        "g": "f7464a8f5cc4e442",
        "name": ".tid formatted",
        "field": "payload",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "\ntitle: I'm a tid formatted tiddler\ntags: node-red1\n\nThis is the text - {{wiki.req.wikiName}} of the tiddler\n+===+\n\ntags: node-red1\ntitle: another tiddler\n\nthis is another one - the +===+ line breaks\ninput into to tiddlers\n+===+\n\n",
        "output": "str",
        "x": 485,
        "y": 340,
        "wires": [
            [
                "2a97f1fbcf6e3dfa"
            ]
        ]
    },
    {
        "id": "fd667c5c3ed8286e",
        "type": "subflow:83b81066588d5f7b",
        "z": "62c6b96ab760ca78",
        "g": "c8562eaca2dbbd8d",
        "name": "",
        "x": 1010,
        "y": 220,
        "wires": []
    },
    {
        "id": "0eea472695108fa2",
        "type": "subflow:489223c003015b3f",
        "z": "62c6b96ab760ca78",
        "g": "792e64e3d6b6966f",
        "name": "",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "fd667c5c3ed8286e",
                "de83c426cb05bd04"
            ]
        ]
    },
    {
        "id": "e23e7dc8a5fc4864",
        "type": "inject",
        "z": "62c6b96ab760ca78",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "x": 65,
        "y": 40,
        "wires": [
            [
                "1873a972a27c2906"
            ]
        ],
        "l": false
    },
    {
        "id": "1873a972a27c2906",
        "type": "function",
        "z": "62c6b96ab760ca78",
        "name": "Display REPL prompt after deploy",
        "func": "global.get('$rt').displayPrompt();\nreturn msg;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 40,
        "wires": []
    },
    {
        "id": "07f989c3cdeb14cb",
        "type": "subflow:8adf8de645b60e16",
        "z": "62c6b96ab760ca78",
        "g": "c882655e8d51597f",
        "name": "",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "cdcaa30c8d7b6208",
                "4df2c978a7ce6665"
            ]
        ]
    },
    {
        "id": "37ee764215ea2cd1",
        "type": "debug",
        "z": "5b24d6e63acf9047",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 420,
        "y": 60,
        "wires": []
    },
    {
        "id": "9be58c4381efebe8",
        "type": "inject",
        "z": "5b24d6e63acf9047",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "this is a test",
        "payloadType": "str",
        "x": 110,
        "y": 60,
        "wires": [
            [
                "bc5f4a5de6bd1455"
            ]
        ]
    },
    {
        "id": "bc5f4a5de6bd1455",
        "type": "function",
        "z": "5b24d6e63acf9047",
        "name": "Global",
        "func": "const $tw = global.get('get$tw')('twtalk');\n\nmsg.tiddlers = JSON.parse($tw.wiki.getTiddlersAsJson('[[docs-docs-talk-writeup]]'));\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 60,
        "wires": [
            [
                "37ee764215ea2cd1"
            ]
        ]
    },
    {
        "id": "080a6cf49bbd8f0f",
        "type": "debug",
        "z": "5b24d6e63acf9047",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 480,
        "y": 140,
        "wires": []
    },
    {
        "id": "6d337caf73bc932b",
        "type": "inject",
        "z": "5b24d6e63acf9047",
        "name": "Wiki add tiddler",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 120,
        "y": 140,
        "wires": [
            [
                "6ed2eb4283386c9c"
            ]
        ]
    },
    {
        "id": "6ed2eb4283386c9c",
        "type": "function",
        "z": "5b24d6e63acf9047",
        "name": "Add tiddler to wiki",
        "func": "const $tw = global.get('get$tw')('twtalk');\nconst $refreshClients = global.get('$refreshClients');\n\n$tw.wiki.addTiddler(new $tw.Tiddler({\n    title: 'docs-docs-nodered',\n    text: 'the coolest quality and support of the TiddlyWiki code base is well established; and the community has a long exciting history, is engaged, with no fear of evaporating anytime soon. Is a BIG plus when a company decides',\n    tags: '$:/pocket-io/docs/docs docs',\n    caption: 'node-red loopback test',\n}))\n\n$refreshClients('twtalk');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "080a6cf49bbd8f0f"
            ]
        ]
    },
    {
        "id": "014708f6c0e76350",
        "type": "debug",
        "z": "5b24d6e63acf9047",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 520,
        "y": 220,
        "wires": []
    },
    {
        "id": "0f2acf4fdfb28076",
        "type": "inject",
        "z": "5b24d6e63acf9047",
        "name": "Change 'twtalk' subtitle",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 140,
        "y": 220,
        "wires": [
            [
                "8c024d2e9a985f38"
            ]
        ]
    },
    {
        "id": "8c024d2e9a985f38",
        "type": "function",
        "z": "5b24d6e63acf9047",
        "name": "twtalk subtitle",
        "func": "const $tw = global.get('get$tw')('twtalk');\nconst $refreshClients = global.get('$refreshClients');\n\n$tw.wiki.addTiddler(new $tw.Tiddler({\n    title: '$:/SiteSubtitle',\n    text: 'TwTalk drafts',\n}))\n\n$refreshClients('twtalk');\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "014708f6c0e76350"
            ]
        ]
    },
    {
        "id": "fede01e136358d42",
        "type": "subflow:295b59907f0d97d2",
        "z": "5b24d6e63acf9047",
        "name": "",
        "env": [
            {
                "name": "tw_wikiname",
                "value": "Home",
                "type": "str"
            },
            {
                "name": "tw_filter",
                "value": "[[Pocket-io System]]",
                "type": "str"
            }
        ],
        "x": 300,
        "y": 280,
        "wires": [
            [
                "014708f6c0e76350"
            ]
        ]
    },
    {
        "id": "365e02efd3817279",
        "type": "inject",
        "z": "5b24d6e63acf9047",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "wikiname",
                "v": "codebase",
                "vt": "str"
            },
            {
                "p": "twfilter",
                "v": "[prefix[package]]",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 280,
        "wires": [
            [
                "fede01e136358d42"
            ]
        ]
    },
    {
        "id": "a21d2f01461d165d",
        "type": "subflow:8adf8de645b60e16",
        "z": "5b24d6e63acf9047",
        "name": "",
        "x": 270,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "cb83fb854d5ee88e",
        "type": "file",
        "z": "5b24d6e63acf9047",
        "name": "",
        "filename": "",
        "filenameType": "str",
        "appendNewline": true,
        "createDir": false,
        "overwriteFile": "false",
        "encoding": "none",
        "x": 520,
        "y": 320,
        "wires": [
            []
        ]
    }
]