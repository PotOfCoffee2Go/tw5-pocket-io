[
    {
        "id": "83b81066588d5f7b",
        "type": "subflow",
        "name": "TW client out",
        "info": "",
        "category": "tiddlywiki",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "4876804024f936fa"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "4876804024f936fa",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "tw5-nodes/networkup.svg"
    },
    {
        "id": "8adf8de645b60e16",
        "type": "subflow",
        "name": "TW client in",
        "info": "",
        "category": "tiddlywiki",
        "in": [],
        "out": [
            {
                "x": 320,
                "y": 80,
                "wires": [
                    {
                        "id": "c423533ded980b73",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "tw5-nodes/networkdown.svg",
        "status": {
            "x": 320,
            "y": 140,
            "wires": [
                {
                    "id": "cadd7bb71eeb7243",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "489223c003015b3f",
        "type": "subflow",
        "name": "write wiki",
        "info": "",
        "category": "tiddlywiki",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "6801d4530f3d9135"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 380,
                "y": 80,
                "wires": [
                    {
                        "id": "6801d4530f3d9135",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tw_msg_overrides",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Use msg.wikiname"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "tw_wikiname",
                "type": "str",
                "value": "",
                "ui": {
                    "label": {
                        "en-US": "Default wikiname"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {},
        "color": "#A6BBCF",
        "icon": "tw5-nodes/write-wiki.png",
        "status": {
            "x": 380,
            "y": 140,
            "wires": [
                {
                    "id": "24783140a82cde75",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "295b59907f0d97d2",
        "type": "subflow",
        "name": "read wiki",
        "info": "Read tiddlers from a wiki. Normally uses the `msg.wikiname` and `msg.twfilter` fields.\r\n\r\n",
        "category": "tiddlywiki",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "b7e1909b4d67f4cf"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 400,
                "y": 80,
                "wires": [
                    {
                        "id": "b7e1909b4d67f4cf",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "tw_msg_overrides",
                "type": "bool",
                "value": "true",
                "ui": {
                    "label": {
                        "en-US": "Use msg.wikiname / msg.twfilter"
                    },
                    "type": "checkbox"
                }
            },
            {
                "name": "tw_wikiname",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-bookmark-o",
                    "label": {
                        "en-US": "Default wiki"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            },
            {
                "name": "tw_filter",
                "type": "str",
                "value": "",
                "ui": {
                    "icon": "font-awesome/fa-filter",
                    "label": {
                        "en-US": "Default filter"
                    },
                    "type": "input",
                    "opts": {
                        "types": [
                            "str",
                            "num",
                            "bool",
                            "json",
                            "bin",
                            "env",
                            "conf-types"
                        ]
                    }
                }
            }
        ],
        "meta": {
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "tw5-nodes/read-wiki.png",
        "status": {
            "x": 400,
            "y": 140,
            "wires": [
                {
                    "id": "e81be91656e745fa",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "0d3535cb27027846",
        "type": "subflow",
        "name": "tiddler parser",
        "info": "\r\nAppend tiddler or array of tiddlers in `msg.payload`\r\nto the msg being returned to the requesting wiki.\r\nThe node can be used multiple times in a single flow.\r\n\r\n## msg.payload\r\nContains JavaScript object or array of objects containing the fields of the tiddler.\r\n - **title** field is required \r\n - **text** is not required - but is very common\r\n \r\n",
        "category": "tiddlywiki",
        "in": [
            {
                "x": 100,
                "y": 80,
                "wires": [
                    {
                        "id": "1b089e0ef2eb4a3e"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 520,
                "y": 80,
                "wires": [
                    {
                        "id": "1b089e0ef2eb4a3e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {
            "license": "MIT"
        },
        "color": "#A6BBCF",
        "icon": "tw5-nodes/tiddlywiki-dark.png",
        "status": {
            "x": 520,
            "y": 140,
            "wires": [
                {
                    "id": "739878cd3a06c69a",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "1d5b93e906f67840",
        "type": "subflow",
        "name": "TW broadcast",
        "info": "",
        "category": "tiddlywiki",
        "in": [
            {
                "x": 80,
                "y": 80,
                "wires": [
                    {
                        "id": "5a302b26a3767cb1"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 420,
                "y": 80,
                "wires": [
                    {
                        "id": "5a302b26a3767cb1",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#C0DEED",
        "icon": "tw5-nodes/broadcast.png",
        "status": {
            "x": 420,
            "y": 140,
            "wires": [
                {
                    "id": "edb1d8695ef972b8",
                    "port": 0
                }
            ]
        }
    },
    {
        "id": "392b55f1513f4105",
        "type": "group",
        "z": "83b81066588d5f7b",
        "name": "\\n Sends message response back to TiddlyWiki \\n   ",
        "style": {
            "label": true,
            "label-position": "s",
            "stroke": "none"
        },
        "nodes": [
            "4876804024f936fa"
        ],
        "x": 114,
        "y": 39,
        "w": 286,
        "h": 122
    },
    {
        "id": "4876804024f936fa",
        "type": "function",
        "z": "83b81066588d5f7b",
        "g": "392b55f1513f4105",
        "name": "To TW Webserver",
        "func": "const repl = global.get('repl'); // REPL context\n\nmsg.payload = repl.$nrParser(msg.payload);\n\n// Send to a specific client\nif (msg.wiki && msg.wiki.req.socketId) {\n\tmsg.payload.forEach(tiddler => {\n\t\tif (tiddler.ioToStory !== undefined) {\n\t\t\tmsg.wiki.riverTitles.push(tiddler.title);\n\t\t\tdelete tiddler.ioToStory;\n\t\t}\n\t\tmsg.wiki.resultTiddlers.push(tiddler);\n\t})\n   repl.$sockets[msg.wiki.req.socketId].socket.emit('msg', msg.wiki);\n}\n// Refresh any client connect to this wiki\nrepl.$refreshClients(msg.wikiname);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "c423533ded980b73",
        "type": "function",
        "z": "8adf8de645b60e16",
        "name": "From TW Webserver",
        "func": "// see 'On Start' tab for implementation\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\nconst $nrMsgNodes = global.get('$nrMsgNodes');\nconst index = $nrMsgNodes.findIndex((element) => element.id === node.id);\n\nif (index > -1) {\n    $nrMsgNodes.splice(index, 1);\n}\n\n$nrMsgNodes.push(node);\n",
        "finalize": "",
        "libs": [],
        "x": 180,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "cadd7bb71eeb7243",
        "type": "status",
        "z": "8adf8de645b60e16",
        "name": "",
        "scope": null,
        "x": 140,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "6801d4530f3d9135",
        "type": "function",
        "z": "489223c003015b3f",
        "name": "write tiddlers to wiki",
        "func": "const repl = global.get('repl');\n\nvar wikiname = msg.wikiname || env.get('tw_wikiname');\n\nif (!wikiname) {\n\tnode.error(`Need wikiname to write`);\n\tnode.done();\n\treturn;\n}\n\nconst $tw = repl.get$tw(wikiname);\nif (!$tw) {\n    node.error(`Wiki ${wikiname} is not found`);\n    node.done();\n    return;\n}\n\nmsg.payload = repl.$nrParser(msg.payload);\n\nmsg.payload.forEach(tid => {\n\t// copy so not delete ioToStory on the original\n\tvar tiddler = Object.assign({},tid); \n\tdelete tiddler.ioToStory;\n\trepl.ins$tw(wikiname, tiddler);\n})\n\nrepl.$refreshClients(wikiname);\n\nnode.status(`${msg.payload.length} tiddlers written`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 230,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "24783140a82cde75",
        "type": "status",
        "z": "489223c003015b3f",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "b7e1909b4d67f4cf",
        "type": "function",
        "z": "295b59907f0d97d2",
        "name": "read tiddlers from wiki",
        "func": "const repl = global.get('repl');\n\nvar wikiname = msg.wikiname || env.get('tw_wikiname');\nvar twfilter = msg.twfilter || env.get('tw_filter');\n\nif (!wikiname || !twfilter) {\n    node.error(`Need both wikiname and twfilter`);\n    node.done();\n    return;\n}\n\nvar isDb = false;\nvar $tw = repl.get$tw(wikiname);\nif (!$tw) {\n    $tw = repl.get$db(wikiname);\n    isDb = true;\n}\n\nif (!$tw) {\n    node.error(`Wiki ${wikiname} is not found`);\n    node.done();\n    return;\n}\n\nmsg.payload = JSON.parse($tw.wiki.getTiddlersAsJson(twfilter));\nnode.status(`'${wikiname}' ${msg.payload.length} tiddlers read`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "e81be91656e745fa",
        "type": "status",
        "z": "295b59907f0d97d2",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "1b089e0ef2eb4a3e",
        "type": "function",
        "z": "0d3535cb27027846",
        "name": "Parse JSON or .tid tiddlers in msg.payload  \\n into javascript array of tiddler objects",
        "func": "\n// msg.payload transformed into a JavaScript array of tiddler field objects\n//  then appended the tiddlers to be sent back to webserver client\nconst repl = global.get('repl');\n\nmsg.payload = repl.$nrParser(msg.payload);\n\nnode.status(`${msg.payload.length} tiddlers parsed`);\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "739878cd3a06c69a",
        "type": "status",
        "z": "0d3535cb27027846",
        "name": "",
        "scope": null,
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5a302b26a3767cb1",
        "type": "function",
        "z": "1d5b93e906f67840",
        "name": "Broadcast to TW Webservers",
        "func": "const repl = global.get('repl');\n\nmsg.payload = repl.$nrParser(msg.payload);\n// Required wiki fields\nmsg.wiki = {req:{sender:''},riverTitles:[],resultTiddlers:[]};\n\nmsg.payload.forEach(tid => {\n\tvar tiddler = Object.assign({}, tid);\n\tif (tiddler.ioToStory !== undefined) {\n\t\tmsg.wiki.riverTitles.push(tiddler.title);\n\t\tdelete tiddler.ioToStory;\n\t}\n\tmsg.wiki.resultTiddlers.push(tiddler);\n})\n// Refresh any client connect to this wiki\nrepl.$broadcastClients(msg.wikiname, msg.wiki);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "edb1d8695ef972b8",
        "type": "status",
        "z": "1d5b93e906f67840",
        "name": "",
        "scope": null,
        "x": 120,
        "y": 140,
        "wires": [
            []
        ]
    }
]
