caption: Credentials
created: 20250426180910813
creator: poc2go
modified: 20250428223659919
modifier: poc2go
tags: docs gettingstarted $:/pocket-io/gettingstarted/docs
title: gettingstarted-docs-credentials
type: text/vnd.tiddlywiki

! Credentials

Node-Red has it's own [[security system|https://nodered.org/docs/user-guide/runtime/securing-node-red]]. Both the flow editor and individual nodes can have credentials which are encrypted. Node-Red also has OAuth built-in so that can be used. Which ever you set up will be in effect for TW5-Node-Red as well. Works fine for TW5-Node-Red's use case.

TiddlyWiki login credentials involve setting up users and giving access to wikis for those users.

When you [[add a wiki|gettingstarted-docs-addwiki]], by default it does not have any security or credentials. Anyone with access to the URL can access the wiki. To allow only certain users access to the wiki - credentials need to be set up for it.

One option is to add middleware to the proxy servers that routes messages from the client wikis to the WebServers. The proxies are [[express|https://expressjs.com/]] servers which has a variety of authentication and authorization middleware available. The proxies can handle the security before access to the WebServers is allowed. Too involved for the scope of this document, but is an option.

TiddlyWiki uses permission parameters and a CSV file to secure a wiki. That is fine if dealing with a single wiki. Changing user information becomes problematic if you have a bunch of wikis in the network. That's a lot of parameters and CSV file changes. The @@color:#aae3bc; security.js@@ and @@color:#aae3bc; ./credentials/users.json@@  files are used to generate the parameters and CSV files for each wiki.

In the package directory will see a sub-directory @@color:aqua;credentials@@. In that directory is a sub-directory @@color:aqua;csv@@ and a file @@color:#aae3bc;users.json@@.

> If you use [[git|https://git-scm.com/]] to provide version control - the @@color:aqua;credentials@@ directory will be ignored by git since has sensitive info. This setting is in @@color:#aae3bc; .gitignore@@ file. So will not be set upstream on a `git push`. Save the @@color:#aae3bc;users.json@@ file somewhere safe. The CSV files are automatically generated, so not as important to save.

The @@color:aqua;csv@@ directory contains the CSV files required by TiddlyWiki to access each wiki. See [[WebServer Parameter: credentials|https://tiddlywiki.com/static/WebServer%2520Parameter%253A%2520credentials.html]]. Instead of going down that rabbit-hole:

The directory is generated automatically on TW5-Node-Red start up if not already present. Since will be changing the credentials - delete the  @@color:aqua;csv@@ directory so it will be re-created on the next startup ('npm start').

The 'users.json' file contains the user name and password of all users authorized to access wikis. On install looks like:

```json
{
	// This are just demo users for the initial install
	// Can be removed - ie: `"demo": {},` 
  "demo": {
    "password": "demo"
  },
  "poc2go": {
    "password": "ppp"
  },

	...
	
}
```

> Change 'poc2go' (That's Me!) to to your user name and a password.
> Can also remove the demo/test users used by the system on initial install.

Go up a directory (back to 'tw5-node-red') and edit 'security.js'. It contains three properties; demo, default, and wikis. 

!!! demo 
Can be ignored - is only used on a fresh install to provide some test users.

!!! default
This is the default list of users and their authorization. See [ext[TiddlyWiki docs|https://tiddlywiki.com/static/WebServer%2520Authorization.html]] for more info.

!!! wikis
This property overrides the defaults on a per wiki basis. Note that if a wiki name is not listed here - it will run without credentials allowing anybody access.

The 'security.js' file looks something like this after initial install :

```js
module.exports = {
	demo: {
		"demo":   { "password": "demo" },
		"poc2go": { "password": "ppp" },
		...
	},

	// Default credentials
	// Users and webserver authorization parameters
	// see https://tiddlywiki.com/static/WebServer%2520Authorization.html
	default: {
		users: ['demo', 'poc2go', 'jane', 'andy', 'roger'],
		authorization: ['readers=(authenticated)', 'writers=(authenticated)', 'admin=poc2go'],
	},

	// Webserver wikis not listed below will run WITHOUT credentials
	//  (entry will be ignored for any wikis that do not exist) in 'wikisDir'
	wikis: {
		'Home': {}, // Apply default credentials
		'notes': {},
		'codebase': {
			users: ['demo', 'poc2go'],
			authorization: ['readers=(authenticated)', 'writers=(authenticated)', 'admin=poc2go'],
		},
		'poc2go': {
			users: ['demo', 'poc2go'],
		}
	}
}
```

> In 'defaults' - change 'poc2go' to your user name so you are a user and are the 'admin'.

> In 'wikis' - change 'poc2go' in 'codebase' to your user name in both 'users' and 'authorization'.

The 'notes' entry is an example of using the default credential settings. The 'poc2go' wiki is an example of overriding the users allowed access.

