caption: Node-Red
created: 20250428135537425
creator: poc2go
modified: 20250428191848132
modifier: poc2go
tags: docs gettingstarted $:/pocket-io/gettingstarted/docs
title: gettingstarted-docs-node-red
type: text/vnd.tiddlywiki

Go to <a href={{$:/temp/pocket-io/nodered}} target="_blank">Node-Red</a> to see the sample flow file provided by the system. Node-Red can also be opened in a [[tiddler|gettingstarted-docs-node-red-frame]] whichever you prefer.



Node-Red runs independently from TW5-Node-Red. They are connected via a REPL context on the TW5-Node-Red side which maps to the functionGlobalContext() Node-Red side. Which pretty much is techno-babble that means all of the $tw, TW5-Node-Red JavaScript functions are available for use by Node-Red function nodes.

The reverse is also true - TW5-Node-Red functions can dynamically access any flow or node in the Node-Red workspace.	

To get an idea, any of these objects or functions can be accessed from Node-Red :

<p style="font-family:monospace;border: 1px solid;border-radius: 10px;">

*		$displayPrompt() - Displays the prompt in the console window
*		$rw - general purpose $tw instance
**		handy to call $tw.utils functions
*		$db - list of all database $tw instances
*		$config - config.js object
*   $ss - complete server settings and objects for all client wikis
**		TW WebServer $tw instance
**		express proxy to WebServer, server, app, router, etc.
*		$sockets - list of all connected client sockets
*		$tpi - TW5-pocket-io low-level functions
*		$wikiNames - names of client wikis in the network
*		$twCodebase - special wiki $tw instance
**		holds JavaScript code loaded to server
*		get$settings(wikiname) - Get the settings from $ss for a wiki
*		get$db(name), qry$db(name), ins$db(name)
**		get $tw / query &#91;&#91;filter]] / insert tiddler into database wiki 
*		get$tw(wikiname), qry$tw(wikiname), ins$tw(wikiname),
**		get $tw / query &#91;&#91;filter]] / insert tiddler into a client wiki 
*		get$proxy(wikiname) - Get express proxy server of a client wiki 
*		get$server(wikiname) - get express proxy html server instance
*		get$router(wikiname) - express proxy routing table middlerware
*		get$pocketio  - code that manages client websocket instances,
*		$refreshClients(wikiname) - have clients 'server-refresh' from their wiki
*		$broadcastClients(wikiname)
**		broadcast to all clients connected to specified wiki,
**		broadcast to all clients if wikiname blank
*		$nrParser(string or object)
**		parse tiddler text or object into native JavaScript object
**		automatically determines input type - JSON, $tw.Tiddler, or .tid format

</p>

