caption: Git
created: 20250427080218627
creator: poc2go
modified: 20250428121315536
modifier: poc2go
tags: docs gettingstarted $:/pocket-io/gettingstarted/docs
title: gettingstarted-docs-git
type: text/vnd.tiddlywiki

! Git - version control

The system is designed to use [[git|https://git-scm.com/]] as a backup and distribution system. Many changes are dynamc and permanent. For example - changing a tiddler in a wiki will automatically update the tiddler on the server. The previous contents of the tiddler are overwritten and lost. 

Node-Red is similar, when flows are deployed it makes a backup - but is only one deploy deep (ie: backup is overwritten every time flows are deployed). 

> There is a default @@color:#aae3bc; .gitignore@@ file in the package directory provided on initial install. Is setup to ignore @@color:aqua;node_modules@@ and the sensitive @@color:aqua;credentials@@ directories. Edit as appropriate for your application. 

So, it is highly recommended to setup git to save the current state of the files in your TW5-Node-Red package. From a terminal window in the package directory :

```
git config --global init.defaultBranch main
```

> The above command is optional - insures default branch is named 'main' instead of the politically incorrect 'master'. Only needs to be done once.

```
git init
git add .
git commit -m "Initial install"
```

This will set up git and store the current content of your files in a @@color:aqua; .git@@ directory. The 'commit' is an image of your files at the time the command is executed.

Any time you wish to backup the current files - do :

```
git add .
git commit -m "Describe changes"
```

Git can revert files back to a previous 'commit'.

<hr class="poc2go-hr">
<p style="margin: 0 3em;">

I usually do not setup a remote repository when starting a new package since more concerned about backup and am changing and commiting  - a lot! The commit messages are quick, dirty, and OK for a few days; but not well thought out. Plus, initiallly not sharing anything. Instead of doing a `git push` I just copy the @@color:aqua; .git@@ directory (which is really small - 1.5 Meg at inital install) onto an SD Drive just in case my machine goes belly up. 

To recover, copy the @@color:aqua; .git@@ directory from the SD drive into a new folder, then 

```
git restore .
npm install
npm start
```

and your back in business.

When close to publishing - I delete the @@color:aqua; .git@@ directory - do a `git init` again and start with a fresh git history. Have the SD drive if I really need to refer back to it. Is a lot easier than going through a ton of commit history, squashing and amending commits, etc. 

Not saying is the best way - is just how I do it.

</p>

<hr class="poc2go-hr">

Is not in the scope of this doc to explain the features of git. [[Git doc|https://git-scm.com/doc]] is the diffinitive manual. Suffice to say that commits can be uploaded (upstream) to cloud based places - like  [[GitHub|https://github.com]], [[BitBucket|https://bitbucket.org/]], etc for remote storage, retrieval, and sharing.
