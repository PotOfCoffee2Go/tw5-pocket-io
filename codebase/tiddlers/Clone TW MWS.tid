created: 20240822050509356
modified: 20240829132117739
tags: app
title: Clone TW MWS
type: text/vnd.tiddlywiki

{{App Prerequisites}}


```js
const { spawnSync } = require('node:child_process');

// Install tiddlywiki locally in current directory
function cloneTW() {
  if (fs.existsSync('TiddlyWiki5')) {
    wrt('TiddlyWiki5 directory already exists');
    return;
  }
  wrt(`Cloning tiddlywiki`);
  syncProcess = spawnSync('git',
    ['clone', 'https://github.com/PotOfCoffee2Go/TiddlyWiki5.git',
      '--branch', 'multi-wiki-support'],
    { stdio: 'inherit' });

  wrt('npm installing dependencies');
  fs.writeFileSync('package.json',`{\n  "dependencies": {\n    "tiddlywiki": "file:./TiddlyWiki5"\n   }\n}\n`);
  syncProcess = spawnSync('npm', ['install'], { stdio: 'inherit' });
}

// Concise way to boot up a TiddlyWiki instance
var $tw;
function bootTW() {
  $tw = require('tiddlywiki').TiddlyWiki();
  $tw.boot.argv = ['main']; // TW output path
  $tw.boot.boot(() => {});
  return `$tw assigned to tiddlywiki v${$tw.version} instance`;
}

// A tw.Commander to do commands
const commander = {
  checkForErrors: (err) => { if (err) { $tw.utils.error("Error: " + err); } },
  execute: (wiki, cmds) => {
    new $tw.Commander(cmds, commander.checkForErrors, wiki,
      {output: process.stdout, error: process.stderr})
    .execute();
  }
}

// --------
cloneTW();

// --------
bootTW();

// --------
$tw.wiki.allTitles()

// --------
commander.execute($tw.wiki, ['--version']);

// --------
rt.setPrompt(hue('TW Install > ',214));


```
